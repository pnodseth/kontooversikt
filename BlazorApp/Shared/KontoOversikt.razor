@inject IConfiguration Configuration

@if (_account is null)
{
    <Loading/>
}
else
{
    <MudItem sm="12">
        <MudText Align="Align.Center" Typo="Typo.h3">PÃ¥ konto</MudText>
        <MudText Typo="Typo.h1" Align="Align.Center" Style="font-size: 12rem; font-weight: bold" Color="Color.Tertiary">@Math.Round(_account.Available) kr </MudText>
    </MudItem>
}



@code {

    [Parameter]
    public required string Name { get; set; } = "";

    private AccountItem? _account;
    private int _available;
    private Timer? _timer;

    protected override async Task OnInitializedAsync()
    {
        var service = new AccountsService(Configuration);
        await service.Connect();
        _account = await service.GetAccountInfo(Name);
        if (_account != null)
        {
            _available = Decimal.ToInt32(_account.Available);

            _timer = new Timer(async (e) =>
            {
                await InvokeAsync(async () =>
                {
                    _account = await service.GetAccountInfo("Imre");
                    if (_account != null) _available = Decimal.ToInt32(_account.Available);
                    StateHasChanged();
                });
            }, null, TimeSpan.Zero, TimeSpan.FromSeconds(20));
        }
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

}