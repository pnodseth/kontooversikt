@using BlazorApp.Data
@using BlazorApp.Data.Models
@using BlazorApp.Store
@inject SingleChallengeService SingleChallengeService
@inject AppState AppState
@using BlafettisLib


@if (_activeChallenge is null)
{
    <MudItem sm="6">
        <MudText Typo="Typo.subtitle1">
            <i>Single Challenges</i>
        </MudText>
        <MudCarousel Class="mud-width-full" Style="height:285px;" ShowArrows="@arrows" ShowBullets="@_bullets" EnableSwipeGesture="@_enableSwipeGesture" AutoCycle="@_autocycle" TData="object">
            @foreach (var challenge in _templateChallenges)
            {
                <MudCarouselItem Transition="_transition" Color="@Color.Warning">
                    <SingleChallengeTemplate Challenge="challenge" CreateSingleChallenge="CreateSingleChallenge"></SingleChallengeTemplate>
                </MudCarouselItem>
            }

        </MudCarousel>
    </MudItem>
}
else
{
    <MudItem sm="6">
 
            <MudCard Outlined="true" Elevation="2" Style="position: relative">
                <MudCardHeader Style="place-content: center">
                    <MudText Class="mr-4" Typo="Typo.subtitle2">Single Challenge:</MudText>
                    <MudText Align="Align.Left" Typo="Typo.subtitle2">@_activeChallenge.Title</MudText>
                </MudCardHeader>
                <MudCardContent Class="pt-0">
                    @if (_activeChallenge.Status == ChoreStatus.Done)
                    {
                        <MudText GutterBottom="true" Class="pb-4">Du har fullført, gratulerer!</MudText>
                        <MudButton Variant="Variant.Filled" Color="Color.Warning" @onclick="() => Payout(_activeChallenge.Id)" FullWidth="true" Disabled="PayoutLoading">
                            @if (PayoutLoading)
                            {
                                <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
                            }
                            else
                            {
                                <MudText Typo="Typo.subtitle2">GI MEG PREMIEN - @_activeChallenge.AmountOnCompletion KR</MudText>
                            }
                        </MudButton>
                    }
                    else if (_activeChallenge.Status == ChoreStatus.Ready)
                    {
                        <MudText Align="Align.Left" Style="font-weight: bold">@_activeChallenge.Description</MudText>
                        <MudText Align="Align.Center" Style="font-weight: bold" Typo="Typo.subtitle1">@_activeChallenge.AmountOnCompletion kr</MudText>
                        <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Info" Size="Size.Large" Class="mt-8" @onclick="() => SetPending(_activeChallenge.Id)">
                            <MudText Typo="Typo.subtitle2">JEG HAR FULLFØRT></MudText>
                        </MudButton>
                    } else if (_activeChallenge.Status == ChoreStatus.Pending)
                    {
                        <MudText Align="Align.Left" Style="font-weight: bold">@_activeChallenge.Description</MudText>
                        <MudText Align="Align.Center" Style="font-weight: bold" Typo="Typo.subtitle1">@_activeChallenge.AmountOnCompletion kr</MudText>
                        <MudText Class="mt-8">Venter på godkjenning...</MudText>
                    }

                </MudCardContent>
            </MudCard>
        

    </MudItem>
}
<div style="position: absolute; bottom: 0; left:  50%;">
    <Blafettis @ref="blafettis" duration="6000"/>
</div>

@code {
    private Transition _transition = Transition.Slide;
    private bool arrows = true;
    private bool _bullets = true;
    private bool _enableSwipeGesture = true;
    private bool _autocycle = false;
    private SingleChallenge? _activeChallenge;
    private List<SingleChallenge> _templateChallenges = new();
    private bool PayoutLoading { get; set; }
    protected Blafettis blafettis;

    protected override async Task OnInitializedAsync()
    {
        _activeChallenge = await SingleChallengeService.GetActiveChallenge(AppState.CurrentChild);
        _templateChallenges = await SingleChallengeService.GetStreakChallengeTemplates();
    }
    
    private async Task CreateSingleChallenge(SingleChallenge challenge)
    {
        challenge.Child = AppState.CurrentChild;
        challenge.IsActive = true;
        challenge.Status = ChoreStatus.Ready;

        try
        {
            await SingleChallengeService.CreateSingleChallenge(challenge);
            _activeChallenge = await SingleChallengeService.GetActiveChallenge(AppState.CurrentChild);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    
    private async Task Payout(int id)
    {
        try
        {
            PayoutLoading = true;
            await SingleChallengeService.Payout(id);
            _activeChallenge = await SingleChallengeService.GetActiveChallenge(AppState.CurrentChild);
            StateHasChanged();
            blafettis.RaiseConfetti();
        }
        catch (Exception ex)
        {
    // todo Implement Dialog
            Console.WriteLine($"Payout error: {ex.Message}");
        }
        finally
        {
            PayoutLoading = false;
        }
    }

    private async Task SetPending(int id)
    {
        try
        {
            await SingleChallengeService.SetStatus(id, ChoreStatus.Pending);
            _activeChallenge = await SingleChallengeService.GetActiveChallenge(AppState.CurrentChild);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating status: {ex.Message}");
        }
    }
}