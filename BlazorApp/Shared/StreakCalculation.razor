@using BlazorApp.Data.Models
<div class="mt-4">
    <MudText Typo="Typo.subtitle2">Din Streak</MudText>
    <MudGrid Style="position: relative">
        <MudItem Style="height: 48px">
            <MudGrid Justify="Justify.SpaceBetween">
                @{
                    var streakList = StreakChallenge.GetCurrentStreak();
                }
                @foreach (var number in Enumerable.Range(0, StreakChallenge.StreakNumberForCompleted))
                {
                    var status = number < streakList.Count ? streakList[number] : (ChoreStatus?) null;

                    if (status == null)
                    {
                        <MudItem>
                            <MudIcon Icon="@Icons.Material.Outlined.Square" Color="Color.Default"></MudIcon>
                        </MudItem>
                    }
                    else if (status == ChoreStatus.Pending)
                    {
                        <MudItem>
                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Default"></MudIcon>
                        </MudItem>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"></MudIcon>
                    }
                }
            </MudGrid>

        </MudItem>
        @if (StreakChallenge.DatesCompleted.All(date => date.DateCompleted.Date != DateTime.Today))
        {
            <MudItem Style="position: absolute; bottom: 0; right: 0;">
                <MudButton Color="Color.Success" Variant="Variant.Outlined" @onclick="() => OnAddStreakDate(StreakChallenge.Id)">Fullf√∏rt</MudButton>
            </MudItem>
        }
    </MudGrid>
</div>

@code {

    [Parameter]
    public required StreakChallenge StreakChallenge { get; set; }

    [Parameter]
    public EventCallback<int> AddStreakDate { get; set; }

    private async Task OnAddStreakDate(int id)
    {
        await AddStreakDate.InvokeAsync(id);
    }

}