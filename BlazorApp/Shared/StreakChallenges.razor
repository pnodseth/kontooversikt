@using BlazorApp.Data
@using BlazorApp.Data.Models
@using BlazorApp.Store
@inject AppState AppState
@inject StreakChallengeService StreakChallengeService
@using BlafettisLib


@if (_activeChallenges.Count == 0)
{
    <MudItem>
        <MudExpansionPanels Class="mud-theme-primary">
            <MudExpansionPanel Class="mud-theme-primary" bind-IsExpanded="_isExpanded">
                <TitleContent>
                    <MudText Typo="Typo.subtitle1">
                        <i>Streak Challenges!</i>
                    </MudText>
                </TitleContent>
                <ChildContent>
                    <MudGrid>
                        @foreach (var challenge in _templateChallenges)
                        {
                            <StreakChallengeTemplate Challenge="challenge" CreateStreakChallenge="CreateStreakChallenge"></StreakChallengeTemplate>
                        }
                    </MudGrid>
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudItem>
}
else
{
    <MudItem sm="6">
        @foreach (var streakChallenge in _activeChallenges)
        {
            <MudCard Outlined="true" Elevation="2" Style="position: relative">
                <MudCardHeader >
                    <MudText Class="mr-4" Typo="Typo.subtitle2">Streak Challenge:</MudText>
                    <MudText Align="Align.Left" Typo="Typo.subtitle2">@streakChallenge.Title</MudText>
                </MudCardHeader>
                <MudCardContent Class="pt-0">
                    @if (streakChallenge.HasAchievedTargetStreak)
                    {
                        <MudText GutterBottom="true" Class="pb-4">Du har fullf√∏rt, gratulerer!</MudText>
                        <MudButton Variant="Variant.Filled" Color="Color.Warning" @onclick="() => Payout(streakChallenge.Id)" FullWidth="true" Disabled="_payoutLoading">
                            @if (_payoutLoading)
                            {
                                <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
                            }
                            else
                            {
                                <MudText Typo="Typo.subtitle2">GI MEG PREMIEN - @streakChallenge.AmountOnCompletion KR</MudText>
                            }
                        </MudButton>
                    }
                    else
                    {
                        <MudText Align="Align.Left" Style="font-weight: bold">@streakChallenge.Description</MudText>
                        <StreakCalculation StreakChallenge="streakChallenge" AddStreakDate="AddStreakDate"></StreakCalculation>
                    }

                </MudCardContent>
            </MudCard>
        }

    </MudItem>
}
@*<MudButton @onclick="ConfettiNow">Confetti</MudButton>*@
<div style="position: absolute; bottom: 0; left:  50%;">
    <Blafettis @ref="blafettis" duration="6000"/>
</div>

@code {

    private List<StreakChallenge> _activeChallenges = new();
    private List<StreakChallenge>? _templateChallenges;
    private bool _payoutLoading { get; set; }
    protected Blafettis blafettis;
    private bool _isExpanded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _activeChallenges = await StreakChallengeService.GetActiveChallenges(AppState.CurrentChild);
        _templateChallenges = await StreakChallengeService.GetStreakChallengeTemplates();
        Console.WriteLine($"active: {_activeChallenges}");
    }

    private async Task CreateStreakChallenge(StreakChallenge challenge)
    {
        challenge.Child = AppState.CurrentChild;
        challenge.IsActive = true;
        challenge.StartsAt = DateOnly.FromDateTime(DateTime.Now);

        try
        {
            await StreakChallengeService.CreateStreakChallenge(challenge);
            _activeChallenges = await StreakChallengeService.GetActiveChallenges(AppState.CurrentChild);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public async Task AddStreakDate(int id)
    {
        await StreakChallengeService.AddStreakDate(id);
        _activeChallenges = await StreakChallengeService.GetActiveChallenges(AppState.CurrentChild);
        StateHasChanged();
    }

    private async Task Payout(int id)
    {
        try
        {
            _payoutLoading = true;
            await StreakChallengeService.Payout(id);
            _activeChallenges = await StreakChallengeService.GetActiveChallenges(AppState.CurrentChild);
            StateHasChanged();
            blafettis.RaiseConfetti();
        }
        catch (Exception ex)
        {
    // todo Implement Dialog
            Console.WriteLine($"Payout error: {ex.Message}");
        }
        finally
        {
            _payoutLoading = false;
        }
    }

    private void ConfettiNow()
    {
        blafettis.RaiseConfetti();
    }

}