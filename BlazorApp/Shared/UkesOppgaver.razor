@using BlazorApp.Data
@using BlazorApp.Data.Models
@using BlazorApp.Store
@inject ChoreService ChoreService
@inject AppState AppState;

<MudItem sm="12">
    <MudGrid Class="mt-8">
        <MudItem sm="12">
            <MudExpansionPanels>
                <MudExpansionPanel Text="Ukesoppgaver">
                    <TitleContent>
                        <div class="d-flex">
                            @if (RemainingTasks == 0 && Chores.Count > 0)
                            {
                                <MudIcon Icon="@(RemainingTasks is 0 ? Icons.Material.Filled.Check : Icons.Material.Filled.HourglassBottom)" class="mr-3" Color="RemainingTasks is 0 ? Color.Success : Color.Warning"></MudIcon>
                            }
                            @if (RemainingTasks > 0)
                            {
                                <MudBadge Content="@RemainingTasks" Overlap="false" Color="Color.Error" Bordered="true">
                                    <MudText>UkesOppgaver</MudText>
                                </MudBadge>
                            }
                            else
                            {
                                <MudText>UkesOppgaver</MudText>
                            }
                        </div>
                    </TitleContent>
                    <ChildContent>
                        @if (Chores.Count > 0)
                        {
                            <MudGrid>
                                @foreach (Chore oppgave in Chores)
                                {
                                    <UkesOppgave Oppgave="oppgave"/>
                                }
                                <MudItem Style="display: flex;align-items: center;justify-content: center;flex-grow: 2;">
                                    <MudText Typo="Typo.h4">@TotalAmount kr</MudText>
                                </MudItem>
                            </MudGrid>
                            <MudGrid Class="mt-4">
                                <MudItem sm="3"></MudItem>
                                <MudItem sm="6" Style="text-align: center">
                                    <MudButton Variant="Variant.Filled" Disabled="RemainingTasks > 0" Size="Size.Large" Color="RemainingTasks > 0 ? Color.Transparent : Color.Success" @onclick="Payout">
                                        Gi meg penger
                                    </MudButton>
                                </MudItem>
                                <MudItem sm="3"></MudItem>
                            </MudGrid>
                        }
                        else
                        {
                            <MudGrid>
                                <MudItem>
                                    <MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="CreateChoresThisWeek">Lag oppgaver til meg</MudButton>
                                </MudItem>
                            </MudGrid>
                        }
                    </ChildContent>

                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudItem>

    </MudGrid>
</MudItem>

@code {

    [Parameter]
    public string Name { get; set; } = "";
    [Parameter]
    public EventCallback UpdateAvailable { get; set; } 

    private List<Chore> Chores { get; set; } = new();
    private int RemainingTasks { get; set; }
    private int TotalAmount { get; set; }
    
    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        Chores = await ChoreService.GetChoresThisWeek(Name);

        RemainingTasks = Chores.Where(o => o.Status == ChoreStatus.Ready).ToList().Count;
        TotalAmount = Chores.Sum(o => o.Amount);
        Console.WriteLine(TotalAmount);
    }

    private async Task CreateChoresThisWeek()
    {
        Chores = await ChoreService.CreateChoresThisWeek(Name);
        RemainingTasks = Chores.Where(o => o.Status == ChoreStatus.Ready).ToList().Count;
        TotalAmount = Chores.Sum(o => o.Amount);
        StateHasChanged();
    }

    private void Payout()
    {
        Console.WriteLine("paying...");
        if (AppState.CurrentName == "Imre")
        {
                var newTotalSum = AppState.AvailableImre + TotalAmount;
                Console.WriteLine($"New total sum: {newTotalSum}");
                AppState.AvailableImre = newTotalSum;
                Console.WriteLine(AppState.AvailableImre);
                StateHasChanged();
            
        }
    }
    
    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }

}